#!/usr/bin/env ruby

# Write PXELINUX boot configuration file from a Palletjack warehouse
#
# Data model assumptions:
#
# Each OS has a box containing the key "host.pxelinux.configfile",
# whose value is a string containing a partial file name for a
# PXELINUX configuration file which installs that OS, in the
# /var/lib/tftpboot/config/ directory, without the ".menu" suffix.
#
# PXELINUX directory tree:
#
# /var/lib/tftpboot/
#  |- pxelinux.cfg
#  |   |- default -> ../config/default
#  |   |- 01-<MAC address> -> ../config/<OS>.menu
#  |   ...
#  |- config
#  |   |- default
#  |   |- <OS>.menu
#  |   ...
#  \- boot
#      |- <OS>
#      |   |- vmlinuz
#      |   |- initrd
#      |   ...
#      ...
#
# Point this script's output directory at /var/lib/tftpboot/, and it
# will create the MAC address symlinks.

require 'palletjack'
require 'optparse'
require 'fileutils'

def exists_ok(&code)
  code.call()
rescue Errno::EEXIST
  nil
end

options = {}

opts = OptionParser.new
opts.banner = "Usage: #{$PROGRAM_NAME} -w <warehouse> -d <output directory>

Write PXELINUX boot configuration files from a Palletjack warehouse

"
opts.on('-w DIR', '--warehouse DIR', 'warehouse directory', String) {|dir| options[:warehouse] = dir }
opts.on('-o DIR', '--output DIR', 'output directory (tftpboot/)', String) {|dir| options[:output] = dir }
opts.parse!

if not options[:warehouse] or
    not options[:output] or
    not File.directory?(options[:output])
  puts opts.to_s
  exit 1
end

exists_ok { Dir.mkdir("#{options[:output]}/pxelinux.cfg/") }

jack = PalletJack.new(options[:warehouse])

jack['system'].each do |system|
  jack['ipv4_interface',
       with_all:{'pallet.system' =>
                 system['pallet.system']}].each do |nic|
    if system['host.pxelinux.config']
      filename = "#{options[:output]}/pxelinux.cfg/01-#{nic['net.layer2.address'].gsub(':', '-').downcase}"
      FileUtils.ln_s("../config/#{system['host.pxelinux.config']}.menu", filename, :force => true)
    end
  end
end
