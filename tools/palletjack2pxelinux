#!/usr/bin/env ruby

# Write PXELINUX boot menus from a Palletjack warehouse
#
# Data model assumptions:
#
# Each +os+ object will contain the keys:
#   host:
#     kickstart:
#       baseurl: <URL to OS installation>
#     pxelinux:
#       config: <basename of pxelinux menu file w/o .menu>
#
# Each +netinstall+ object will contain the keys:
#   host:
#     kickstart:
#       label: <human-friendly label for variant>
#       ksurl: ["none"|<URL to kickstart file>]
#     pxelinux:
#       config: <basename of pxelinux menu file w/o .menu>
#       kernel: <tftp path of pxelinux kernel>
#       append: <pxelinux kernel parameters>
#
# PXELINUX directory tree:
#
# /var/lib/tftpboot/
#  |- pxelinux.cfg
#  |   |- default -> ../config/default
#  |   |- 01-<MAC address> -> ../config/<OS>-<Variant>.menu
#  |   ...
#  |- config
#  |   |- default
#  |   |- linux.menu
#  |   |- <OS>.menu
#  |   |- <OS>-<Variant>.menu
#  |   ...
#  \- boot
#      |- <OS>
#      |   |- vmlinuz
#      |   |- initrd
#      |   ...
#      ...
#
# Point this script's output directory at /var/lib/tftpboot/, and it
# will create the MAC address symlinks, and menu tree for linux
# installations.
#
# The boot/... and config/default needs to be populated by other means.

require 'palletjack'
require 'palletjack/tool-support'
require 'optparse'
require 'fileutils'

def exists_ok(&code)
  code.call()
rescue Errno::EEXIST
  nil
end

# Generate pxe menus for each OS configuration

def pxemenu_for_netinstall(netinstall)
  config=netinstall['host.pxelinux.config']
  os_label=netinstall['system.os'].gsub(/-/, ' ')
  ks_label=(netinstall['host.kickstart.label'] ||
            netinstall['host.kickstart.variant'] )
  kernel=netinstall['host.pxelinux.kernel']
  append=netinstall['host.pxelinux.append']

  File.open("#{$options[:output]}/config/#{config}.menu",
            File::CREAT | File::TRUNC | File::WRONLY, 0644) do |menufile|
    menufile << git_header('palletjack2pxelinux', $options[:warehouse])
    menufile << "
UI menu.c32
PROMPT 0
MENU INCLUDE /config/graphics.conf
MENU AUTOBOOT Installing #{os_label} (#{ks_label}) in # seconds
TIMEOUT 100

MENU TITLE Install #{os_label} (#{ks_label})

LABEL #{config}
  MENU LABEL ^Install #{os_label} (#{ks_label})
  MENU DEFAULT
  KERNEL #{kernel}
  APPEND #{append}

LABEL MainMenu
  MENU LABEL ^Main Menu
  KERNEL menu.c32
  APPEND /config/default
"
  end
end

# Generate pxe menus for each OS version

def pxemenu_for_operating_system(os)
  config=os['host.pxelinux.config']
  os_label=config.gsub(/-/, ' ')
  kernel=os['host.pxelinux.kernel']
  append=os['host.pxelinux.append']

  File.open("#{$options[:output]}/config/#{config}.menu",
            File::CREAT | File::TRUNC | File::WRONLY, 0644) do |menufile|
    menufile << git_header('palletjack2pxelinux', $options[:warehouse])
    menufile << "
UI menu.c32
PROMPT 0
MENU INCLUDE /config/graphics.conf

MENU TITLE #{os_label} Installation Menu
"

    $jack['netinstall',
          with_all:{'system.os' => config}].each do |netinstall|
      config=netinstall['host.pxelinux.config']
      ks_label=(netinstall['host.kickstart.label'] ||
                netinstall['host.kickstart.variant'] )
      kernel=netinstall['host.pxelinux.kernel']
      append=netinstall['host.pxelinux.append']

      pxemenu_for_netinstall(netinstall)

      menufile << "
LABEL #{config}
  MENU LABEL Install #{os_label} (#{ks_label})
  KERNEL menu.c32
  APPEND /config/#{config}.menu
"
    end

    menufile << "
LABEL MainMenu
  MENU LABEL ^Main Menu
  KERNEL menu.c32
  APPEND /config/default
"
  end
end

$options = {}

opts = OptionParser.new
opts.banner = "Usage: #{$PROGRAM_NAME} -w <warehouse> -d <output directory>

Write PXELINUX boot configuration files from a Palletjack warehouse

"
opts.on('-w DIR', '--warehouse DIR', 'warehouse directory', String) {|dir| $options[:warehouse] = dir }
opts.on('-o DIR', '--output DIR', 'output directory (tftpboot/)', String) {|dir| $options[:output] = dir }
opts.parse!

if not $options[:warehouse] or
    not $options[:output] or
    not File.directory?($options[:output])
  puts opts.to_s
  exit 1
end

exists_ok { Dir.mkdir("#{$options[:output]}/config/") }
exists_ok { Dir.mkdir("#{$options[:output]}/pxelinux.cfg/") }

$jack = PalletJack.new($options[:warehouse])

File.open("#{$options[:output]}/config/linux.menu",
          File::CREAT | File::TRUNC | File::WRONLY, 0644) do |menufile|
  menufile << git_header('palletjack2pxelinux', $options[:warehouse])
  menufile << "
UI menu.c32
PROMPT 0
MENU INCLUDE /config/graphics.conf

MENU TITLE Linux Installation Menu
"

  $jack['os'].each do |os|
    next unless config=os['host.pxelinux.config']

    label=config.gsub(/-/, ' ')

    pxemenu_for_operating_system(os)

    menufile << "
LABEL #{config}
  MENU LABEL Install #{label}
  KERNEL menu.c32
  APPEND /config/#{config}.menu
"
  end
end

# Generate pxe default menu links for each system

$jack['system'].each do |system|
  system.children.each do |nic|
    next unless nic.kind == 'ipv4_interface'
    if system['host.pxelinux.config']
      filename = "#{$options[:output]}/pxelinux.cfg/01-#{nic['net.layer2.address'].gsub(':', '-').downcase}"
      FileUtils.ln_s("../config/#{system['host.pxelinux.config']}.menu", filename, :force => true)
    end
  end
end
